# Nome do Workflow
name: Create ChatControl Multi-Platform Release

# Gatilhos de Execução
on:
  # 1. Automaticamente quando uma nova tag (versão) é criada e enviada
  push:
    tags:
      - '*'
  # 2. Manualmente, através da aba "Actions" no GitHub
  workflow_dispatch:

# Definição dos Trabalhos (Jobs)
jobs:
  build-and-release:
    # Usar a última versão do Ubuntu como ambiente de execução
    runs-on: ubuntu-latest
    # Permissões necessárias para criar uma release no repositório
    permissions:
      contents: write
      
    steps:
      # Passo 1: Baixar o código do seu repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # Passo 2: Determinar a tag da versão e buscar o changelog oficial
      - name: Define Tag and Fetch Changelog
        id: get_info
        run: |
          # Se o workflow foi acionado por uma tag, usa essa tag.
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_NAME="${{ github.ref_name }}"
            echo "Workflow triggered by tag: $TAG_NAME"
          # Se foi acionado manualmente, busca a última tag do repositório original.
          else
            echo "Workflow triggered manually. Fetching latest tag from original project..."
            TAG_NAME=$(gh api repos/kangarko/ChatControl/releases/latest --jq '.tag_name')
            echo "Latest tag found: $TAG_NAME"
          fi
          # Salva a tag para ser usada em outros passos
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          
          # Busca o corpo da release (changelog) da tag correspondente no repositório original.
          CHANGELOG_BODY=$(gh api repos/kangarko/ChatControl/releases/tags/$TAG_NAME --jq '.body' 2>/dev/null) || true
          if [[ -z "$CHANGELOG_BODY" ]]; then
            CHANGELOG_BODY="Nenhum changelog oficial encontrado para esta tag."
          fi
          # Salva o changelog para ser usado na criação da release
          cat <<EOF >> "$GITHUB_OUTPUT"
          changelog<<HEREDOC
          $CHANGELOG_BODY
          HEREDOC
          EOF
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Passo 3: Configurar o ambiente Java (JDK 21)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          # A API do Paper 1.21+ e a biblioteca Foundation exigem Java 21
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # Passo 4: Compilar e instalar a dependência principal 'Foundation'
      - name: Build and Install 'Foundation' Dependency
        run: |
          echo "Cloning and installing the Foundation library..."
          git clone https://github.com/kangarko/Foundation.git
          # Entra na pasta e instala a biblioteca no repositório local do Maven
          cd Foundation
          mvn -B install -DskipTests

      # Passo 5: Baixar as dependências locais para BungeeCord e Velocity
      - name: Download Local Dependencies
        run: |
          echo "Downloading required JARs for Bungee and Velocity modules..."
          # Cria os diretórios 'library' onde os JARs devem estar
          mkdir -p chatcontrol-bungee/library
          mkdir -p chatcontrol-velocity/library
          
          # Baixa as dependências necessárias que não estão em repositórios públicos
          curl -L -o chatcontrol-bungee/library/BungeecordPartyAndFriends.jar https://ci.kangarko.com/job/BungeeParties/lastSuccessfulBuild/artifact/target/BungeecordPartyAndFriends.jar
          curl -L -o chatcontrol-bungee/library/RedisBungee-Bungee-0.12.5-all.jar https://github.com/MineAcademy/ChatControl-Pro/raw/master/lib/RedisBungee-Bungee-0.12.5-all.jar
          curl -L -o chatcontrol-velocity/library/RedisBungee-Proxy-Velocity-0.12.5-all.jar https://github.com/MineAcademy/ChatControl-Pro/raw/master/lib/RedisBungee-Proxy-Velocity-0.12.5-all.jar
          echo "Dependencies downloaded."

      # Passo 6: Compilar todos os módulos do ChatControl
      - name: Build All ChatControl Modules with Maven
        run: |
          # Executa o comando para compilar e empacotar todos os módulos do projeto.
          # Como as dependências locais já foram baixadas, isso agora funcionará.
          mvn -B package -DskipTests

      # Passo 7: Organizar os arquivos JAR para a release
      - name: Prepare Release Assets
        run: |
          # Cria uma pasta para organizar os artefatos
          mkdir -p release_assets
          
          # Encontra e renomeia cada JAR para um nome claro e o move para a pasta de assets
          find chatcontrol-bukkit/target -name "ChatControl-Pro-*.jar" -exec mv {} release_assets/ChatControl-Paper-${{ steps.get_info.outputs.tag_name }}.jar \;
          find chatcontrol-bungee/target -name "ChatControl-Bungee-*.jar" -exec mv {} release_assets/ChatControl-Bungee-${{ steps.get_info.outputs.tag_name }}.jar \;
          find chatcontrol-velocity/target -name "ChatControl-Velocity-*.jar" -exec mv {} release_assets/ChatControl-Velocity-${{ steps.get_info.outputs.tag_name }}.jar \;
          
          echo "Assets prepared for release:"
          ls -l release_assets

      # Passo 8: Criar a Release no GitHub com os 3 arquivos JAR
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Usa a tag e o changelog obtidos no Passo 2
          tag_name: ${{ steps.get_info.outputs.tag_name }}
          body: ${{ steps.get_info.outputs.changelog }}
          # Anexa todos os arquivos JAR da pasta de assets à release
          files: release_assets/*.jar
