# Nome do Workflow
name: 'Build and Release ChatControlCG'

# Gatilhos
on:
  push:
    branches:
      - 'main' # Ou 'master' se for o nome da sua branch principal
  
  workflow_dispatch:
    inputs:
      is_prerelease:
        description: 'Marcar como um pr√©-release (beta)?'
        type: boolean
        default: false

# Permiss√µes
permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Set up JDK 8'
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      # NOVO PASSO: Resolve dinamicamente a vers√£o "LATEST" e atualiza os POMs temporariamente
      - name: 'Resolve LATEST Version Dynamically'
        run: |
          echo "Finding the LATEST version number for Foundation library..."
          
          # 1. Busca no reposit√≥rio da biblioteca e extrai o n√∫mero da vers√£o mais alta
          LATEST_VERSION=$(curl -sL https://bitbucket.org/kangarko/libraries/raw/master/org/mineacademy/foundation-core/ | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | sort -V | tail -n 1)
          
          if [ -z "$LATEST_VERSION" ]; then
            echo "::error::Could not find the latest version for the Foundation library. Aborting."
            exit 1
          fi

          echo "Latest Foundation version detected: ${LATEST_VERSION}"
          echo "Temporarily replacing 'LATEST' with '${LATEST_VERSION}' in all pom.xml files..."

          # 2. Encontra todos os arquivos pom.xml e substitui a string <version>LATEST</version>
          # A altera√ß√£o √© apenas na m√°quina da automa√ß√£o, n√£o afeta seu reposit√≥rio.
          find . -name "pom.xml" -print0 | xargs -0 sed -i 's|<version>LATEST</version>|<version>'"${LATEST_VERSION}"'</version>|g'
          
          echo "Replacement complete. Proceeding with the build."

      - name: 'Build with Maven'
        run: mvn -B clean package

      - name: 'Upload plugin .jar as artifact'
        uses: actions/upload-artifact@v4
        with:
          name: plugin-jar
          path: chatcontrol-bukkit/target/ChatControl-*.jar
          retention-days: 1

  release:
    if: github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Download the built plugin .jar'
        uses: actions/download-artifact@v4
        with:
          name: plugin-jar

      - name: 'Fetch latest release info from original repository'
        id: fetch_info
        run: |
          LATEST_RELEASE_JSON=$(curl -sL https://api.github.com/repos/kangarko/ChatControl/releases/latest)
          TAG_NAME=$(echo "$LATEST_RELEASE_JSON" | jq -r '.tag_name')
          CHANGELOG_BODY=$(echo "$LATEST_RELEASE_JSON" | jq -r '.body')
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "### üìú Changelog do Projeto Original (Vers√£o ${TAG_NAME})" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "${CHANGELOG_BODY}" >> RELEASE_NOTES.md
          echo "Vers√£o detectada: ${TAG_NAME}"

      - name: 'Create GitHub Release'
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_NOTES.md
          files: ChatControl-*.jar
          tag_name: ${{ steps.fetch_info.outputs.TAG_NAME }}
          name: "Release ${{ steps.fetch_info.outputs.TAG_NAME }}"
          prerelease: ${{ inputs.is_prerelease }}
